/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode getmid(ListNode head){
        if(head == null || head.next == null){
            return head;
        }
        ListNode slow = head;
        ListNode fast = head;
        ListNode prev = null; 

        while (fast != null && fast.next != null) {
            prev = slow;
            slow = slow.next;
            fast = fast.next.next;
        }

       
        if (prev != null) {
            prev.next = null;
        }
       return slow;
    }
     public ListNode Merge(ListNode left , ListNode right){
        ListNode msll = new ListNode(-1);
        ListNode temp = msll;

        while(left !=null && right !=null){
            if(left.val < right.val){
                temp.next = left;
                left = left.next;
                temp = temp.next;
            }
            else{
                temp.next = right;
                right = right.next;
                temp = temp.next;
            }
        }

        while(left!=null){
               temp.next = left;
                left = left.next;
                temp = temp.next;
        }

        while(right!=null){
               temp.next = right;
                right = right.next;
                temp = temp.next;
        }

        return msll.next;
     }
    public ListNode sortList(ListNode head) {
        if(head==null || head.next == null){
            return head;
        }
        ListNode mid = getmid(head);
            
        ListNode left = sortList(head);
        ListNode right = sortList(mid);

        return Merge(left,right);
    }
}
