class Solution {
    public static int count = 0;
	public  void MergeSort(int[]arr , int si , int ei) {
		if(si>=ei) {
			return ;
		}
		int mid = si + (ei - si)/2;
		
		 MergeSort(arr, si, mid);
		 MergeSort(arr, mid+1, ei);
		 Merge(arr , si , ei , mid);
	}
    public static void Merge(int arr[] ,int si , int ei , int mid) {
		int temp[] = new int[ei-si+1];

		//System.out.println(" si " + arr[si] + " " + " ei " + arr[ei]);
		int i = si , j = mid +1;
		
		while(i <= mid && j <= ei) {
			// System.out.println(" si " + arr[i] + " > "+ " ei " + arr[j]);
			if(arr[i] > (2L*arr[j])){
				count +=(mid - i + 1);
				// System.out.println("(mid - i + 1) " + (mid - i + 1));
				j++;
			}
			else {
				i++;
			}
		}
		 i = si;
		 j = mid+1;
		 int k = 0;
		
		while(i <= mid && j <= ei) {
			if(arr[i] < arr[j]) {
				temp[k++] = arr[i++];
			}
			else {
				temp[k++] = arr[j++];
			}
		}
		
		while(i <= mid) {
			temp[k++] = arr[i++];
		}
		
		while(j <= ei){
			temp[k++] = arr[j++];
		}
		for( int l = si , m = 0; m < temp.length ; l++ , m++) {
			arr[l] = temp[m];
		}
		
		
		
	}
    public int reversePairs(int[] nums) {
         count = 0;
         MergeSort(nums, 0, nums.length-1);
         return count;
    }
}
